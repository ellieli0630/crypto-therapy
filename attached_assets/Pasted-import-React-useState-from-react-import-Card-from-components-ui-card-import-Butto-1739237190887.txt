import React, { useState } from 'react';
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { RadarChart, Radar, PolarGrid, PolarAngleAxis } from 'recharts';
import { AlertCircle, MessageSquare, TrendingUp } from 'lucide-react';
import { motion } from 'framer-motion';
import "@fontsource/8bit-wonder";
import "@fontsource/poppins";

const moods = {
  "DANGER": {
    responses: ["MARKETS ARE TEMPORARY. DRIP IS FOREVER.", "STAY TOXIC.", "COPE HARDER."],
    tag: "MT.KILIMANJARO"
  },
  "UNDERGROUND": {
    responses: ["NO SIGNAL FOUND_", "SYSTEM MALFUNCTION_", "IDENTITY NOT FOUND_"],
    tag: "VAGABOND"
  },
  "RESISTANCE": {
    responses: ["STAY UNDERGROUND", "TRUST NO ONE", "SURVIVE THE DUMP"],
    tag: "UNICODE"
  }
};

const marketData = [
  { subject: "RISK", score: 95, fullMark: 100 },
  { subject: "FEAR", score: 80, fullMark: 100 },
  { subject: "GREED", score: 70, fullMark: 100 },
  { subject: "CHAOS", score: 100, fullMark: 100 }
];

const CryptoTherapyUI = () => {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");

  const sendMessage = () => {
    if (!input.trim()) return;
    const mood = Object.keys(moods)[Math.floor(Math.random() * 3)];
    const responses = moods[mood].responses;
    const response = responses[Math.floor(Math.random() * responses.length)];
    
    setMessages(prev => [...prev, 
      { type: 'user', text: input },
      { type: 'ai', text: response, tag: moods[mood].tag }
    ]);
    setInput("");
  };

  return (
    <div className="min-h-screen bg-black text-white font-poppins">
      <div className="fixed inset-0 pointer-events-none opacity-10">
        <div className="absolute inset-0 bg-gradient-to-b from-red-500/10 via-transparent to-blue-500/10" />
      </div>

      <div className="max-w-6xl mx-auto p-4">
        <header className="mb-12">
          <h1 className="text-7xl font-8bit-wonder tracking-tighter text-white">
            CRYPTO<span className="text-red-500">.THERAPY</span>
          </h1>
          <p className="text-gray-500 font-mono">VERSION [R.2] // SYSTEM ACTIVE_</p>
        </header>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          <Card className="bg-black border border-gray-800 relative overflow-hidden">
            <div className="p-6 relative">
              <h2 className="text-2xl font-8bit-wonder">MARKET_PULSE</h2>
              <RadarChart width={300} height={250} data={marketData}>
                <PolarGrid stroke="#333" />
                <PolarAngleAxis dataKey="subject" stroke="#fff" tick={{ fill: '#fff', fontSize: 12 }} />
                <Radar name="Market" dataKey="score" stroke="#ff0000" fill="#ff0000" fillOpacity={0.2} />
              </RadarChart>
            </div>
          </Card>

          <Card className="bg-black border border-gray-800 relative overflow-hidden">
            <div className="p-6 relative">
              <h2 className="text-2xl font-8bit-wonder">THERAPY_SESSION</h2>
              <div className="h-64 overflow-y-auto mb-4 space-y-4">
                {messages.map((msg, idx) => (
                  <motion.div 
                    key={idx} 
                    initial={{ opacity: 0 }} 
                    animate={{ opacity: 1 }} 
                    transition={{ duration: 0.3 }}
                    className={`$ {msg.type === 'user' ? 'ml-auto text-right' : 'mr-auto'}`}
                  >
                    {msg.type === 'ai' && (
                      <span className="text-xs text-red-500 font-mono block mb-1">[{msg.tag}]_</span>
                    )}
                    <div className={`inline-block p-3 rounded ${msg.type === 'user' ? 'bg-blue-500/10 border border-blue-500/20' : 'bg-red-500/10 border border-red-500/20'}`}>
                      <span className="font-mono">{msg.text}</span>
                    </div>
                  </motion.div>
                ))}
              </div>
              <div className="flex gap-2">
                <Input value={input} onChange={(e) => setInput(e.target.value)} placeholder="ENTER_COMMAND//" className="bg-black border-gray-800 font-mono" />
                <Button onClick={sendMessage} className="bg-red-500 hover:bg-red-600">
                  <TrendingUp className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default CryptoTherapyUI;
